@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNubmer = 0; animalNubmer < shuffledAnimals.Count; animalNubmer++)
        {
            var animal = shuffledAnimals[animalNubmer];
            var uniqueDescrtiption = $"Button #{animalNubmer}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescrtiption))" type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>
<PageTitle>Find a pair</PageTitle>


@code{
    List<string> animalEmoji = new List<string>()
{
         "🐶", "🐶",
         "🐱", "🐱",
         "🐍", "🐍",
         "🐊", "🐊",
         "🐝", "🐝",
         "🐺", "🐺",
         "🐠", "🐠",
         "🐞", "🐞",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();

    }
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            //Выбор первого элемента пары. Запомнить его
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription)) {
            //Совпадение обнаружено! Выполнить сброс для следующей пары.
            lastAnimalFound = string.Empty;

            //Найденные животные заменяются пустыми строками, чтобы скрыть эмодзи на экране
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Сыграем ещё?";

                SetUpGame();
            }

        }
        else
        {
            //Пользователь выбрал непарных животных
            //Сбросить сохранённый выбор
            lastAnimalFound = string.Empty;
        }
    }
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
            .ToString("0.0s");
            StateHasChanged();
        });
    }
}
